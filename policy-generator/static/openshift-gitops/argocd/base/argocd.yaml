apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: argocd
  namespace: openshift-gitops
spec:
  applicationSet:
    enabled: true
    sourceNamespaces:
      - openshift-gitops
      - hub-gitops
    resources:
      limits:
        cpu: '1'
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 512Mi
  controller:
    processors:
      operation: 3
      status: 3
    resources:
      limits:
        cpu: '1'
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 512Mi
    sharding:
      enabled: true
      replicas: 3
  grafana:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  ha:
    enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  initialSSHKnownHosts: {}
  kustomizeBuildOptions: '--enable-alpha-plugins'
  prometheus:
    enabled: false
  rbac:
    defaultPolicy: ''
    policy: |
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
    scopes: '[groups]'
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  repo:
    env:
      - name: KUSTOMIZE_PLUGIN_HOME
        value: /etc/kustomize/plugin
      - name: POLICY_GEN_ENABLE_HELM
        value: 'true'
      - name: POLICY_GEN_DISABLE_LOAD_RESTRICTORS
        value: 'true'
    initContainers:
      - command:
          - /bin/bash
          - -c
          - |
            set -x
            cp /PolicyGenerator /policy-generator-plugin/PolicyGenerator
            chmod +x /policy-generator-plugin/PolicyGenerator
        image: quay.io/nasx/policygenerator-plugin-container:latest
        imagePullPolicy: Always
        name: policy-generator-plugin-install
        volumeMounts:
          - mountPath: /policy-generator-plugin
            name: policy-generator-plugin
    replicas: 3
    resources:
      limits:
        cpu: '1'
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 512Mi
    volumeMounts:
      - mountPath: /etc/kustomize/plugin/policy.open-cluster-management.io/v1/policygenerator
        name: policy-generator-plugin
    volumes:
      - emptyDir: {}
        name: policy-generator-plugin
  resourceExclusions: |
    - apiGroups:
      - tekton.dev
      kinds:
      - PipelineRun
  resourceHealthChecks:
    - check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
      group: argoproj.io
      kind: Application
    - check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.phase ~= nil then
            if obj.status.phase == "Complete" then
              hs.status = "Healthy"
              hs.message = obj.status.phase
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for InstallPlan to complete"
        return hs
      group: operators.coreos.com
      kind: InstallPlan
    - check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.currentCSV ~= nil and (obj.status.state == "AtLatestKnown" or obj.status.state == "UpgradeAvailable" or obj.status.state == "UpgradePending") then
            hs.status = "Healthy"
            hs.message = "Subscription installed"
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Subscription to complete."
        return hs
      group: operators.coreos.com
      kind: Subscription
  resourceIgnoreDifferences:
    resourceIdentifiers:
      - customization:
          jsonPointers:
            - /spec/host
        group: route.openshift.io
        kind: Route
      - customization:
          jsonPointers:
            - /spec/template/spec/containers/0/image
        group: apps
        kind: Deployment
      - customization:
          jsonPointers:
            - /spec/template/spec/containers/0/image
        group: apps.openshift.io
        kind: DeploymentConfig
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    replicas: 3
    resources:
      limits:
        cpu: '1'
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 512Mi
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: reencrypt
    service:
      type: ''
  sso:
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
    provider: dex
  statusBadgeEnabled: true
  tls:
    ca: {}

